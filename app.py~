from __future__ import print_function
import httplib2
import os

from apiclient import discovery
from oauth2client import client
from oauth2client import tools
from oauth2client.file import Storage
from future.standard_library import import install_aliases
install_aliases()

from urllib.parse import import urlparse, urlencode
from urllib.request import import urlopen, Request
from urllib.error import import HTTPError

import json
import os

from flask import import Flask
from flask import import request
from flask import import make_response

import datetime

app = Flask(__name__)

try:
    import argparse
    flags = argparse.ArgumentParser(parents=[tools.argparser]).parse_args()
except ImportError:
    flags = None

SCOPES = 'https://www.googleapis.com/auth/calendar'
CLIENT_SECRET_FILE = 'client_secret.json'
APPLICATION_NAME = 'Google Calendar API Python Quickstart'


def get_credentials():
    home_dir = os.path.expanduser('~')
    print(home_dir)
    credential_dir = os.path.join(home_dir, '.credentials')
    if not os.path.exists(credential_dir):
        os.makedirs(credential_dir)
    credential_path = os.path.join(credential_dir,
                                   'calendar-python-quickstart.json')

    store = Storage(credential_path)
    credentials = store.get()
    if not credentials or credentials.invalid:
        flow = client.flow_from_clientsecrets(CLIENT_SECRET_FILE, SCOPES)
        flow.user_agent = APPLICATION_NAME
        if flags:
            credentials = tools.run_flow(flow, store, flags)
        else:
            credentials = tools.run(flow, store)
        print('Storing credentials to ' + credential_path)
    return credentials

def create_event():
    credentials = get_credentials()
    http = credentials.authorize(httplib2.Http())
    service = discovery.build('calendar', 'v3', http=http)
    summary = "Summary"
    description = "Description goes here"
    GMT_OFF = '+05:30'
    start_time = '2017-06-01T09:00:00%s'% GMT_OFF
    end_time = '2017-06-01T10:00:00%s'% GMT_OFF
    EVENT = {
        'summary' : summary,
        'start' : {'dateTime' : start_time},
        'end' : {'dateTime' : end_time},
    }
    e = service.events().insert(calendarId = 'primary',
                                sendNotifications=True, body=EVENT).execute()
    print ("Event added")

@app.route('/webhook', methods=['POST'])
def webhook():
    req = request.get_json(silent=True, force=True)

    print("Request:")
    print(json.dumps(req, indent=4))

    res = processRequest(req)

    res = json.dumps(res, indent=4)
    # print(res)
    r = make_response(res)
    r.headers['Content-Type'] = 'application/json'
    return r

if __name__ == '__main__':
    main()
